// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CommonViewerScriptEntry template generates correct template w/o controllers 1`] = `
"
  import {createControllersWithDescriptors, initAppForPageWrapper} from 'yoshi-flow-editor-runtime/build/viewerScript.js';
  
  

  
  import * as viewerApp from 'project/src/app.ts';
    var importedApp = viewerApp;


  var sentryConfig = null;

  var experimentsConfig = {\\"scope\\":\\"test-scope\\"};

  var translationsConfig = {\\"default\\":\\"en\\"};

  import biLogger from 'a/b/c';

  export const initAppForPage = initAppForPageWrapper({
    initAppForPage: importedApp.initAppForPage,
    sentry: sentryConfig,
    experimentsConfig: experimentsConfig,
    inEditor: false,
    biLogger: biLogger,
    projectName: \\"someProject\\",
    biConfig: {\\"visitor\\":\\"visitor-bi-package\\",\\"owner\\":\\"owner-bi-package\\"},
    appName: \\"someApp\\",
    translationsConfig: translationsConfig,
  });

  export const createControllers = createControllersWithDescriptors([]);
"
`;

exports[`CommonViewerScriptEntry template generates correct template with a single controller 1`] = `
"
  import {createControllersWithDescriptors, initAppForPageWrapper} from 'yoshi-flow-editor-runtime/build/viewerScript.js';
  
  import controller0 from 'project/src/components/button/controller.ts';

  
  import * as viewerApp from 'project/src/app.ts';
    var importedApp = viewerApp;


  var sentryConfig = null;

  var experimentsConfig = {\\"scope\\":\\"test-scope\\"};

  var translationsConfig = null;

  import biLogger from 'a/b/c';

  export const initAppForPage = initAppForPageWrapper({
    initAppForPage: importedApp.initAppForPage,
    sentry: sentryConfig,
    experimentsConfig: experimentsConfig,
    inEditor: false,
    biLogger: biLogger,
    projectName: \\"someProject\\",
    biConfig: {},
    appName: \\"someapp\\",
    translationsConfig: translationsConfig,
  });

  export const createControllers = createControllersWithDescriptors([{ method: controller0,
          widgetType: \\"WIDGET_OUT_OF_IFRAME\\",
          translationsConfig: null,
          experimentsConfig: {\\"scope\\":\\"test-scope\\"},
          defaultTranslations: {},
          biLogger: biLogger,
          biConfig: {},
          controllerFileName: \\"project/src/components/button/controller.ts\\",
          appName: \\"someapp\\",
          projectName: \\"someProject\\",
          componentName: \\"SomeWidget\\",
          id: \\"CONTROLLER_ID\\" }]);
"
`;

exports[`CommonViewerScriptEntry template generates correct template with a single controller and without viewerEntryFileName 1`] = `
"
  import {createControllersWithDescriptors, initAppForPageWrapper} from 'yoshi-flow-editor-runtime/build/viewerScript.js';
  
  import controller0 from 'project/src/components/button/controller.ts';

  
  var importedApp = {};


  var sentryConfig = null;

  var experimentsConfig = {\\"scope\\":\\"test-scope\\"};

  var translationsConfig = {\\"default\\":\\"en\\"};

  import biLogger from 'a/b/c';

  export const initAppForPage = initAppForPageWrapper({
    initAppForPage: importedApp.initAppForPage,
    sentry: sentryConfig,
    experimentsConfig: experimentsConfig,
    inEditor: false,
    biLogger: biLogger,
    projectName: \\"someProject\\",
    biConfig: {},
    appName: \\"someApp\\",
    translationsConfig: translationsConfig,
  });

  export const createControllers = createControllersWithDescriptors([{ method: controller0,
          widgetType: \\"WIDGET_OUT_OF_IFRAME\\",
          translationsConfig: {\\"default\\":\\"en\\"},
          experimentsConfig: {\\"scope\\":\\"test-scope\\"},
          defaultTranslations: null,
          biLogger: biLogger,
          biConfig: {},
          controllerFileName: \\"project/src/components/button/controller.ts\\",
          appName: \\"someApp\\",
          projectName: \\"someProject\\",
          componentName: \\"SomeComp\\",
          id: \\"123\\" }]);
"
`;

exports[`CommonViewerScriptEntry template generates correct template with controllerId override 1`] = `
"
  import {createControllersWithDescriptors, initAppForPageWrapper} from 'yoshi-flow-editor-runtime/build/viewerScript.js';
  
  import controller0 from 'project/src/components/todo/controller.ts';
import controller1 from 'project/src/components/todo/controller.ts';

  
  import * as viewerApp from 'project/src/app.ts';
    var importedApp = viewerApp;


  var sentryConfig = null;

  var experimentsConfig = {\\"scope\\":\\"test-scope\\"};

  var translationsConfig = {\\"default\\":\\"en\\"};

  var biLogger = null;

  export const initAppForPage = initAppForPageWrapper({
    initAppForPage: importedApp.initAppForPage,
    sentry: sentryConfig,
    experimentsConfig: experimentsConfig,
    inEditor: false,
    biLogger: biLogger,
    projectName: \\"someProject\\",
    biConfig: {\\"visitor\\":\\"visitor-bi-package\\",\\"owner\\":\\"owner-bi-package\\"},
    appName: \\"someapp\\",
    translationsConfig: translationsConfig,
  });

  export const createControllers = createControllersWithDescriptors([{ method: controller0,
          widgetType: \\"STUDIO_WIDGET\\",
          translationsConfig: {\\"default\\":\\"en\\"},
          experimentsConfig: {\\"scope\\":\\"test-scope\\"},
          defaultTranslations: {\\"a\\":\\"b\\"},
          biLogger: biLogger,
          biConfig: {\\"visitor\\":\\"visitor-bi-package\\",\\"owner\\":\\"owner-bi-package\\"},
          controllerFileName: \\"project/src/components/todo/controller.ts\\",
          appName: \\"someapp\\",
          projectName: \\"someProject\\",
          componentName: \\"SomeWidget\\",
          id: \\"CONTROLLER_ID\\" }, { method: controller1,
          widgetType: \\"STUDIO_WIDGET\\",
          translationsConfig: {\\"default\\":\\"en\\"},
          experimentsConfig: {\\"scope\\":\\"test-scope\\"},
          defaultTranslations: {\\"a\\":\\"b\\"},
          biLogger: biLogger,
          biConfig: {\\"visitor\\":\\"visitor-bi-package\\",\\"owner\\":\\"owner-bi-package\\"},
          controllerFileName: \\"project/src/components/todo/controller.ts\\",
          appName: \\"someapp\\",
          projectName: \\"someProject\\",
          componentName: \\"SomeWidget\\",
          id: \\"09876\\" }]);
"
`;

exports[`CommonViewerScriptEntry template generates correct template with multiple controllers 1`] = `
"
  import {createControllersWithDescriptors, initAppForPageWrapper} from 'yoshi-flow-editor-runtime/build/viewerScript.js';
  
  import controller0 from 'project/src/components/todo/controller.ts';
import controller1 from 'project/src/components/todo/controller.ts';

  
  import * as viewerApp from 'project/src/app.ts';
    var importedApp = viewerApp;


  var sentryConfig = null;

  var experimentsConfig = {\\"scope\\":\\"test-scope\\"};

  var translationsConfig = {\\"default\\":\\"en\\"};

  import biLogger from 'a/b/c';

  export const initAppForPage = initAppForPageWrapper({
    initAppForPage: importedApp.initAppForPage,
    sentry: sentryConfig,
    experimentsConfig: experimentsConfig,
    inEditor: false,
    biLogger: biLogger,
    projectName: \\"someProject\\",
    biConfig: {\\"visitor\\":\\"visitor-bi-package\\",\\"owner\\":\\"owner-bi-package\\"},
    appName: \\"someapp\\",
    translationsConfig: translationsConfig,
  });

  export const createControllers = createControllersWithDescriptors([{ method: controller0,
          widgetType: \\"WIDGET_OUT_OF_IFRAME\\",
          translationsConfig: {\\"default\\":\\"en\\"},
          experimentsConfig: {\\"scope\\":\\"test-scope\\"},
          defaultTranslations: {\\"a\\":\\"b\\"},
          biLogger: biLogger,
          biConfig: {\\"visitor\\":\\"visitor-bi-package\\",\\"owner\\":\\"owner-bi-package\\"},
          controllerFileName: \\"project/src/components/todo/controller.ts\\",
          appName: \\"someapp\\",
          projectName: \\"someProject\\",
          componentName: \\"SomeWidget\\",
          id: \\"CONTROLLER_ID\\" }, { method: controller1,
          widgetType: \\"WIDGET_OUT_OF_IFRAME\\",
          translationsConfig: {\\"default\\":\\"en\\"},
          experimentsConfig: {\\"scope\\":\\"test-scope\\"},
          defaultTranslations: {\\"a\\":\\"b\\"},
          biLogger: biLogger,
          biConfig: {\\"visitor\\":\\"visitor-bi-package\\",\\"owner\\":\\"owner-bi-package\\"},
          controllerFileName: \\"project/src/components/todo/controller.ts\\",
          appName: \\"someapp\\",
          projectName: \\"someProject\\",
          componentName: \\"SomeWidget\\",
          id: \\"CONTROLLER_ID\\" }]);
"
`;

exports[`CommonViewerScriptEntry template generates correct template with sentry 1`] = `
"
  import {createControllersWithDescriptors, initAppForPageWrapper} from 'yoshi-flow-editor-runtime/build/viewerScript.js';
  
  import controller0 from 'project/src/components/button/controller.ts';

  
  import * as viewerApp from 'project/src/app.ts';
    var importedApp = viewerApp;


  var sentryConfig = {
      DSN: 'https:xxx@123',
      id: 'xxx',
      projectName: 'project-name',
      teamName: 'team-name',
    };

  var experimentsConfig = {\\"scope\\":\\"test-scope\\"};

  var translationsConfig = {\\"default\\":\\"en\\"};

  var biLogger = null;

  export const initAppForPage = initAppForPageWrapper({
    initAppForPage: importedApp.initAppForPage,
    sentry: sentryConfig,
    experimentsConfig: experimentsConfig,
    inEditor: false,
    biLogger: biLogger,
    projectName: \\"someProject\\",
    biConfig: {\\"visitor\\":\\"visitor-bi-package\\",\\"owner\\":\\"owner-bi-package\\"},
    appName: \\"someApp\\",
    translationsConfig: translationsConfig,
  });

  export const createControllers = createControllersWithDescriptors([{ method: controller0,
          widgetType: \\"WIDGET_OUT_OF_IFRAME\\",
          translationsConfig: {\\"default\\":\\"en\\"},
          experimentsConfig: {\\"scope\\":\\"test-scope\\"},
          defaultTranslations: {\\"a\\":\\"b\\"},
          biLogger: biLogger,
          biConfig: {\\"visitor\\":\\"visitor-bi-package\\",\\"owner\\":\\"owner-bi-package\\"},
          controllerFileName: \\"project/src/components/button/controller.ts\\",
          appName: \\"someApp\\",
          projectName: \\"someProject\\",
          componentName: \\"SomeWidget\\",
          id: \\"CONTROLLER_ID\\" }]);
"
`;
